#!/usr/bin/env sh

# git-goto: Switch to any git branch interactively.
#
# If the script is discoverable via PATH, then git will pick it up and make it
# available as `goto` subcommand. 
# 
# For info on git subcommands, see https://opensource.com/article/22/4/customize-git-subcommands
#
# Dependencies:
#
#   - fzf, https://github.com/junegunn/fzf
#
# Inspired by https://gist.github.com/soulim/2c0364d411f8e6a8a470a56a66d4d07d
#
# Example:
#
#   # NOTE: the script is located in `~/.bin` directory
#   # which is included into PATH.
#
#   git goto

set -o errexit   # Always exit on error
set -o nounset   # Treat unset variables as errors

# List all git branches (including remote) except current and HEAD.
# Sort by latest commit date first.
# Additionally remove all leading spaces for each line of the list.
branches=$(git branch --all --sort=-committerdate | grep --invert-match --extended-regexp "origin/main|HEAD" | sed "s/.* //")

# List remote branches last
remotes=$(echo "$branches" | grep '^remotes')
locals=$(echo "$branches" | grep -v '^remotes')

branches=$(echo "${locals}\n${remotes}")

# Select a branch to switch to using interactive fuzzy search applied to
# the list of branches.
#
# If one of remote branches is selected, then remove `remotes/*/` prefix
# from the name, e.g. `remotes/origin/foo-bar` becomes `foo-bar`
branch=$(echo "$branches" | fzf --height=40% | sed "s#remotes/[^/]*/##")

# Switch to a selected branch.
if [[ -n "$branch" ]]
then
  git checkout "$branch"
fi